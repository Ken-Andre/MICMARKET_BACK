{
  "openapi": "3.0.0",
  "info": {
    "title": "MicMarket API",
    "version": "1.0.0",
    "description": "The MicMarket API Docs",
    "contact": {
      "name": "Jaba Space",
      "email": "jabaspace@gmail.com",
      "url": "https://micmarket-back.vercel.app"
    }
  },
  "servers": [
    {
      "url": "http://localhost:4000",
      "description": "Development server"
    },
    {
      "url": "https://miniature-space-spoon-xgjj5v7wq562vgp4-4000.app.github.dev",
      "description": "Staging server"
    },
    {
      "url": "https://micmarket-back.vercel.app",
      "description": "Production server"
    }
  ],

  "paths": {
    "/api/health": {
      "get": {
        "tags": ["Health Check"],
        "summary": "Check if the API is working",
        "description": "Returns a success message if the API is working well.",
        "responses": {
          "200": {
            "description": "API is working well",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "API is working well"
                    },
                    "timestamp": {
                      "type": "string",
                      "example": "2025-08-01T12:00:00.000Z"
                    },
                    "server_ip": {
                      "type": "string",
                      "example": "0.0.0.0"
                    },
                    "cidr": {
                      "type": "string",
                      "example": "0.0.0.0/0"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/user/admin-login": {
      "post": {
        "tags": ["User"],
        "summary": "Admin Login",
        "description": "Login as admin",
        "requestBody": {
          "description": "Request body for a new login",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Email of the admin account"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of the admin account"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Admin"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/user/login": {
      "post": {
        "tags": ["User"],
        "summary": "Login User",
        "description": "Login as a user",
        "requestBody": {
          "description": "Request body for a new login",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Email of the user account"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of the user account"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginUser"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/user/smooth-login": {
      "post": {
        "tags": ["User"],
        "summary": "Startup Login",
        "description": "Login as a startup user",
        "requestBody": {
          "description": "Request body for a new login",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Email of the startup account"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of the startup account"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartupLogin"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/startup": {
      "post": {
        "tags": ["Startup"],
        "summary": "Create a new startup",
        "description": "Create a new startup",
        "requestBody": {
          "description": "Request body for creating a new startup",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Startup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Startup"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
        "tags": ["Startup"],
        "summary": "Get all startups",
        "description": "Get all startups",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Startup"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/startup/{id}": {
      "get": {
        "tags": ["Startup"],
        "summary": "Get a startup",
        "description": "Get a startup by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the startup to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Startup"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": ["Startup"],
        "summary": "Update a startup",
        "description": "Update a startup by ID (Startup owner or Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the startup to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body for updating a startup",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Startup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Startup"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": ["Startup"],
        "summary": "Delete a startup",
        "description": "Delete a startup by ID (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the startup to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/startup/upload/{id}": {
      "put": {
        "tags": ["Startup"],
        "summary": "Upload startup image",
        "description": "Upload an image for a startup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the startup to upload an image for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/startup/removeFalseImageIds": {
      "get": {
        "tags": ["Startup"],
        "summary": "Remove false image IDs",
        "description": "Remove false image IDs from startups (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/startup/block-startup/{id}": {
      "put": {
        "tags": ["Startup"],
        "summary": "Block a startup",
        "description": "Block a startup by ID (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the startup to block",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/startup/unblock-startup/{id}": {
      "put": {
        "tags": ["Startup"],
        "summary": "Unblock a startup",
        "description": "Unblock a startup by ID (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the startup to unblock",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/startup/mediumrate/{id}": {
      "get": {
        "tags": ["Startup"],
        "summary": "Get startup rating stats",
        "description": "Get rating statistics for a startup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the startup to get rating stats for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/upload": {
      "post": {
        "tags": ["Upload"],
        "summary": "Upload images",
        "description": "Upload one or more images",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "images": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Image"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/upload/delete-img/{id}": {
      "delete": {
        "tags": ["Upload"],
        "summary": "Delete an image",
        "description": "Delete an image by ID (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the image to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/product": {
      "post": {
        "tags": ["Product"],
        "summary": "Create a new product",
        "description": "Create a new product (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Request body for creating a new product",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
        "tags": ["Product"],
        "summary": "Get all products",
        "description": "Get all products",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/product/{id}": {
      "get": {
        "tags": ["Product"],
        "summary": "Get a product",
        "description": "Get a product by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the product to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": ["Product"],
        "summary": "Update a product",
        "description": "Update a product by ID (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the product to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body for updating a product",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": ["Product"],
        "summary": "Delete a product",
        "description": "Delete a product by ID (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the product to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/category": {
      "post": {
        "tags": ["Category"],
        "summary": "Create a new category",
        "description": "Create a new category (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Request body for creating a new category",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of the category"
                  }
                },
                "required": ["title"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
        "tags": ["Category"],
        "summary": "Get all categories",
        "description": "Get all categories",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/category/{id}": {
      "put": {
        "tags": ["Category"],
        "summary": "Update a category",
        "description": "Update a category by ID (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the category to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body for updating a category",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The new title of the category"
                  }
                },
                "required": ["title"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": ["Category"],
        "summary": "Delete a category",
        "description": "Delete a category by ID (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the category to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
        "tags": ["Category"],
        "summary": "Get a category",
        "description": "Get a category by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the category to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/enquiry": {
      "post": {
        "tags": ["Enquiry"],
        "summary": "Create a new enquiry",
        "description": "Create a new enquiry",
        "requestBody": {
          "description": "Request body for creating a new enquiry",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "mobile": {
                    "type": "string"
                  },
                  "comment": {
                    "type": "string"
                  }
                },
                "required": ["name", "email", "mobile", "comment"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Enquiry"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
        "tags": ["Enquiry"],
        "summary": "Get all enquiries",
        "description": "Get all enquiries (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Enquiry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/enquiry/{id}": {
      "put": {
        "tags": ["Enquiry"],
        "summary": "Update an enquiry",
        "description": "Update an enquiry by ID (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the enquiry to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body for updating an enquiry",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  }
                },
                "required": ["status"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Enquiry"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": ["Enquiry"],
        "summary": "Delete an enquiry",
        "description": "Delete an enquiry by ID (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the enquiry to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
        "tags": ["Enquiry"],
        "summary": "Get an enquiry",
        "description": "Get an enquiry by ID (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the enquiry to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Enquiry"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/user/register": {
      "post": {
        "tags": ["User"],
        "summary": "Create User",
        "description": "Create a new user",
        "requestBody": {
          "description": "Request body for creating a new user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstname": {
                    "type": "string",
                    "description": "First name of the new user"
                  },
                  "lastname": {
                    "type": "string",
                    "description": "Last name of the new user"
                  },
                  "email": {
                    "type": "string",
                    "description": "Email of the new user"
                  },
                  "mobile": {
                    "type": "string",
                    "description": "Mobile number of the new user"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of the new user"
                  },
                  "role": {
                    "type": "string",
                    "description": "Role of the new user"
                  }
                },
                "required": [
                  "firstname",
                  "lastname",
                  "email",
                  "password",
                  "role"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUser"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/user/forgot-password-token": {
      "post": {
        "tags": ["User"],
        "summary": "Forgot Password Token",
        "description": "Send an email to user to reset password",
        "requestBody": {
          "description": "Request body for sending password reset email",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Email of the user requesting the password reset"
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForgotPasswordToken"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/user/reset-password/{token}": {
      "put": {
        "tags": ["User"],
        "summary": "Reset Password",
        "description": "Reset user's password using the provided token",
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "required": true,
            "description": "The password reset token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body for resetting user password",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": "The new password of the user"
                  }
                },
                "required": ["password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetPassword"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/user/password": {
      "put": {
        "tags": ["User"],
        "summary": "Update Password",
        "description": "Update user's password",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Request body for updating user password",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": "The new password of the user"
                  }
                },
                "required": ["password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePassword"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/user/get-orders": {
      "get": {
        "tags": ["User"],
        "summary": "Get User Orders",
        "description": "Get all orders for the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/user/get-all-orders": {
      "get": {
        "tags": ["User"],
        "summary": "Get All Orders (Admin)",
        "description": "Get all orders in the system (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/user/logout": {
      "get": {
        "tags": ["User"],
        "summary": "Logout User",
        "description": "Logs out the currently authenticated user",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/user/address": {
      "put": {
        "tags": ["User"],
        "summary": "Save User Address",
        "description": "Save or update the address for the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Request body for saving user address",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "description": "The user's address"
                  }
                },
                "required": ["address"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAddress"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
        "tags": ["User"],
        "summary": "Get User Address",
        "description": "Get the saved address for the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveAddress"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/user/all-users": {
      "get": {
        "tags": ["User"],
        "summary": "Get All Users",
        "description": "Get all users in the system",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllUsers"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/user/{id}": {
      "get": {
        "tags": ["User"],
        "summary": "Get a User",
        "description": "Get a single user by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAUser"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/user/update-order/{id}": {
      "put": {
        "tags": ["User"],
        "summary": "Update Order Status",
        "description": "Update the status of an order by ID (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the order to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body for updating order status",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "The new status of the order",
                    "example": "Delivered"
                  }
                },
                "required": ["status"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": ["User"],
        "summary": "Delete User",
        "description": "Delete a user with the given ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user to delete",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteUser"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/user/edit-user": {
      "put": {
        "tags": ["User"],
        "summary": "Update a User",
        "description": "Update the authenticated user's details",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Request body for updating user details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstname": {
                    "type": "string",
                    "description": "The updated first name of the user"
                  },
                  "lastname": {
                    "type": "string",
                    "description": "The updated last name of the user"
                  },
                  "email": {
                    "type": "string",
                    "description": "The updated email of the user"
                  },
                  "mobile": {
                    "type": "string",
                    "description": "The updated mobile number of the user"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUser"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/user/block-user/{id}": {
      "put": {
        "tags": ["User"],
        "summary": "Block User",
        "description": "Block a user by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user to block",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockUser"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/user/unblock-user/{id}": {
      "put": {
        "tags": ["User"],
        "summary": "Unblock User",
        "description": "Unblock a user by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user to unblock",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnblockUser"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/user/refresh": {
      "get": {
        "tags": ["User"],
        "summary": "Handle Refresh Token",
        "description": "Handle refresh token and generate new access token",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/user/cart": {
      "post": {
        "tags": ["User"],
        "summary": "Add to Cart",
        "description": "Add an item to the user's cart",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Request body for adding to cart",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cart": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string"
                        },
                        "count": {
                          "type": "number"
                        },
                        "color": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
        "tags": ["User"],
        "summary": "Get User Cart",
        "description": "Get the cart of the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/empty-cart": {
      "delete": {
        "tags": ["User"],
        "summary": "Empty Cart",
        "description": "Empty the cart of the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/user/cart/cash-order": {
      "post": {
        "tags": ["User"],
        "summary": "Create Order",
        "description": "Create a new cash order for the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "The request body for creating a new order",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "COD": {
                    "type": "boolean",
                    "description": "Whether the payment method is Cash on Delivery or not"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/startup/rating": {
      "put": {
        "tags": ["Startup"],
        "summary": "Create a new rating for a startup",
        "description": "Creates a new rating for a startup and updates the startup's total rating",
        "requestBody": {
          "description": "Request body for a new rating",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prodId": {
                    "type": "string",
                    "description": "ID of the startup being rated"
                  },
                  "star": {
                    "type": "number",
                    "description": "Rating given by the user (1-5)"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Optional comment from the user"
                  }
                },
                "required": ["prodId", "star"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Startup"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Startup not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/rating/{id}": {
      "put": {
        "tags": ["Startup"],
        "summary": "Update an existing rating for a startup",
        "description": "Updates an existing rating for a startup and updates the startup's total rating",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the rating to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body for an updated rating",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "star": {
                    "type": "number",
                    "description": "Updated rating given by the user (1-5)"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Optional updated comment from the user"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Startup"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Rating not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },

  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Admin": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The ID of the admin user"
          },
          "firstname": {
            "type": "string",
            "description": "The first name of the admin user"
          },
          "lastname": {
            "type": "string",
            "description": "The last name of the admin user"
          },
          "email": {
            "type": "string",
            "description": "The email of the admin user"
          },
          "mobile": {
            "type": "string",
            "description": "The mobile number of the admin user"
          },
          "token": {
            "type": "string",
            "description": "The authentication token for the admin user"
          }
        }
      },
      "LoginUser": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The ID of the user"
          },
          "firstname": {
            "type": "string",
            "description": "The first name of the user"
          },
          "lastname": {
            "type": "string",
            "description": "The last name of the user"
          },
          "email": {
            "type": "string",
            "description": "The email of the user"
          },
          "mobile": {
            "type": "string",
            "description": "The mobile number of the user"
          },
          "token": {
            "type": "string",
            "description": "The authentication token for the user"
          },
          "role": {
            "type": "string",
            "description": "The role of the user"
          }
        }
      },
      "StartupLogin": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The ID of the startup user"
          },
          "firstname": {
            "type": "string",
            "description": "The first name of the startup user"
          },
          "lastname": {
            "type": "string",
            "description": "The last name of the startup user"
          },
          "email": {
            "type": "string",
            "description": "The email of the startup user"
          },
          "mobile": {
            "type": "string",
            "description": "The mobile number of the startup user"
          },
          "token": {
            "type": "string",
            "description": "The authentication token for the startup user"
          }
        }
      },
      "CreateUser": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The ID of the new user"
          },
          "firstname": {
            "type": "string",
            "description": "The first name of the new user"
          },
          "lastname": {
            "type": "string",
            "description": "The last name of the new user"
          },
          "email": {
            "type": "string",
            "description": "The email of the new user"
          },
          "mobile": {
            "type": "string",
            "description": "The mobile number of the new user"
          },
          "role": {
            "type": "string",
            "description": "The role of the new user"
          }
        }
      },
      "ForgotPasswordToken": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "The password reset token"
          }
        }
      },
      "ResetPassword": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The ID of the user whose password was reset"
          },
          "firstname": {
            "type": "string",
            "description": "The first name of the user whose password was reset"
          },
          "lastname": {
            "type": "string",
            "description": "The last name of the user whose password was reset"
          },
          "email": {
            "type": "string",
            "description": "The email of the user whose password was reset"
          },
          "mobile": {
            "type": "string",
            "description": "The mobile number of the user whose password was reset"
          },
          "role": {
            "type": "string",
            "description": "The role of the user whose password was reset"
          }
        }
      },
      "UpdatePassword": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The ID of the user whose password was updated"
          },
          "firstname": {
            "type": "string",
            "description": "The first name of the user whose password was updated"
          },
          "lastname": {
            "type": "string",
            "description": "The last name of the user whose password was updated"
          },
          "email": {
            "type": "string",
            "description": "The email of the user whose password was updated"
          },
          "mobile": {
            "type": "string",
            "description": "The mobile number of the user whose password was updated"
          },
          "role": {
            "type": "string",
            "description": "The role of the user whose password was updated"
          }
        }
      },
      "SaveAddress": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The ID of the user whose address was updated"
          },
          "firstname": {
            "type": "string",
            "description": "The first name of the user whose address was updated"
          },
          "lastname": {
            "type": "string",
            "description": "The last name of the user whose address was updated"
          },
          "email": {
            "type": "string",
            "description": "The email of the user whose address was updated"
          },
          "mobile": {
            "type": "string",
            "description": "The mobile number of the user whose address was updated"
          },
          "role": {
            "type": "string",
            "description": "The role of the user whose address was updated"
          },
          "address": {
            "type": "object",
            "description": "The updated address of the user"
          }
        }
      },
      "GetAllUsers": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "The ID of the user"
            },
            "firstname": {
              "type": "string",
              "description": "The first name of the user"
            },
            "lastname": {
              "type": "string",
              "description": "The last name of the user"
            },
            "email": {
              "type": "string",
              "description": "The email of the user"
            },
            "mobile": {
              "type": "string",
              "description": "The mobile number of the user"
            },
            "role": {
              "type": "string",
              "description": "The role of the user"
            }
          }
        }
      },
      "GetAUser": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The ID of the user"
          },
          "firstname": {
            "type": "string",
            "description": "The first name of the user"
          },
          "lastname": {
            "type": "string",
            "description": "The last name of the user"
          },
          "email": {
            "type": "string",
            "description": "The email of the user"
          },
          "mobile": {
            "type": "string",
            "description": "The mobile number of the user"
          },
          "role": {
            "type": "string",
            "description": "The role of the user"
          }
        }
      },
      "UpdateUser": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The ID of the user"
          },
          "firstname": {
            "type": "string",
            "description": "The updated first name of the user"
          },
          "lastname": {
            "type": "string",
            "description": "The updated last name of the user"
          },
          "email": {
            "type": "string",
            "description": "The updated email of the user"
          },
          "mobile": {
            "type": "string",
            "description": "The updated mobile number of the user"
          },
          "role": {
            "type": "string",
            "description": "The role of the user"
          }
        }
      },
      "BlockUser": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A message indicating that the user has been blocked"
          }
        }
      },
      "UnblockUser": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A message indicating that the user has been unblocked"
          }
        }
      },
      "DeleteUser": {
        "type": "object",
        "properties": {
          "deleteaUser": {
            "type": "object",
            "description": "The deleted user object"
          }
        }
      },
      "AccessToken": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "The access token for the user"
          }
        }
      },
      "Cart": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The ID of the cart"
          },
          "orderby": {
            "type": "string",
            "description": "The ID of the user who ordered the cart"
          },
          "startups": {
            "type": "array",
            "description": "The list of startups in the cart",
            "items": {
              "type": "object",
              "properties": {
                "startup": {
                  "type": "object",
                  "description": "The startup object in the cart",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "description": "The ID of the startup"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the startup"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the startup"
                    },
                    "image": {
                      "type": "string",
                      "description": "The image URL of the startup"
                    }
                  }
                },
                "quantity": {
                  "type": "number",
                  "description": "The quantity of the startup in the cart"
                }
              }
            }
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The ID of the category"
          },
          "title": {
            "type": "string",
            "description": "The title of the category"
          }
        }
      },
      "Enquiry": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "default": "Submitted"
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "category": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "url"
            }
          },
          "ratings": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "star": {
                  "type": "number"
                },
                "postedby": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Image": {
        "type": "object",
        "properties": {
          "asset_id": {
            "type": "string"
          },
          "public_id": {
            "type": "string"
          },
          "version": {
            "type": "number"
          },
          "version_id": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "width": {
            "type": "number"
          },
          "height": {
            "type": "number"
          },
          "format": {
            "type": "string"
          },
          "resource_type": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "bytes": {
            "type": "number"
          },
          "type": {
            "type": "string"
          },
          "etag": {
            "type": "string"
          },
          "placeholder": {
            "type": "boolean"
          },
          "url": {
            "type": "string",
            "format": "url"
          },
          "secure_url": {
            "type": "string",
            "format": "url"
          },
          "original_filename": {
            "type": "string"
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The ID of the order"
          },
          "startups": {
            "type": "array",
            "description": "The list of startups in the order",
            "items": {
              "type": "object",
              "properties": {
                "startup": {
                  "type": "object",
                  "description": "The startup object in the order",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "description": "The ID of the startup"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the startup"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the startup"
                    },
                    "image": {
                      "type": "string",
                      "description": "The image URL of the startup"
                    }
                  }
                },
                "quantity": {
                  "type": "number",
                  "description": "The quantity of the startup in the order"
                }
              }
            }
          },
          "paymentIntent": {
            "type": "object",
            "description": "The payment object in the order",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the payment"
              },
              "method": {
                "type": "string",
                "description": "The payment method"
              },
              "amount": {
                "type": "number",
                "description": "The payment amount"
              },
              "status": {
                "type": "string",
                "description": "The payment status"
              },
              "created": {
                "type": "string",
                "description": "The payment creation date"
              },
              "currency": {
                "type": "string",
                "description": "The payment currency"
              }
            }
          },
          "orderby": {
            "type": "string",
            "description": "The ID of the user who ordered the cart"
          },
          "orderStatus": {
            "type": "string",
            "description": "The status of the order"
          }
        }
      },
      "Startup": {
        "type": "object",
        "properties": {
          "price": {
            "type": "number"
          },
          "quantity": {
            "type": "number"
          },
          "sell": {
            "type": "number"
          },
          "totalratings": {
            "type": "string",
            "description": "The total number of ratings for the startup"
          },
          "_id": {
            "type": "string",
            "description": "The ID of the startup"
          },
          "name": {
            "type": "string",
            "description": "The name of the startup"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the startup"
          },
          "website": {
            "type": "string",
            "description": "The website of the startup"
          },
          "address": {
            "type": "string",
            "description": "The address of the startup"
          },
          "category": {
            "type": "string",
            "description": "The category of the startup"
          },
          "images": {
            "type": "array",
            "description": "An array of image URLs for the startup",
            "items": {
              "type": "string"
            }
          },
          "ratings": {
            "type": "array",
            "description": "An array of ratings for the startup",
            "items": {
              "type": "object",
              "properties": {
                "star": {
                  "type": "number",
                  "description": "The rating given by the user"
                },
                "comment": {
                  "type": "string",
                  "description": "The comment from the user"
                },
                "createdAt": {
                  "type": "string",
                  "description": "The date the rating was created"
                },
                "_id": {
                  "type": "string",
                  "description": "The ID of the rating"
                }
              }
            }
          }
        }
      }
    }
  }
}
